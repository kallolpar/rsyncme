CC			= gcc
CFLAGS			= -c -Wall -o2 -Wextra -D_GNU_SOURCE -Wfatal-errors -std=gnu99 $(INCLUDES)
CFLAGS_D		= -c -g -DDEBUG -Wall -Wextra -D_GNU_SOURCE -Wfatal-errors -std=gnu99 $(INCLUDES)
#CFLAGS_D2		= -c -g -DDEBUG -Wall -Wextra -D_GNU_SOURCE -Wfatal-errors -std=gnu99 -Wl,--wrap=fread$(INCLUDES)
CPPFLAGS		+=              #compiler flags
LDFLAGS			= -lpthread -lcmocka -L../../include -L../include  #-lpcap
LDFLAGS2		= -lpthread -lcmocka -L../../include -L../include  -Wl,--wrap=fstat -Wl,--wrap=fstat64 -Wl,--wrap=malloc -Wl,--wrap=fread
TESTSRCDIR		:= .
AUXOBJDIR_D		:= ../../build/debug
AUXOBJDIR		:= ../../build/release
AUXSRCS			:= $(filter-out ../../src/main.c, $(wildcard ../../src/*.c))
AUXSRCS			:= $(filter-out ../../src/rm_cmd.c, $(AUXSRCS))
AUXOBJS			:= $(patsubst %/%.c, %/$(AUXOBJDIR)/%.o, $(AUXSRCS))
AUXOBJS_D		:= $(patsubst %/%.c, %/$(AUXOBJDIR_D)/%.o, $(AUXSRCS))
SRCDIR			:= .

SRCS := $(wildcard *.c)
_SRCS := $(filter-out md5_test.c, $(SRCS))
_TESTOBJECTS := $(patsubst %.c,%.o,$(_SRCS))
INCLUDES  += -I. -I../../include -I../../include/twlist/include -I../include

TESTOUTPUTDIR_D		:= ../build/debug
TESTOBJECTS_D		:= $(patsubst %,$(TESTOUTPUTDIR_D)/%,$(_TESTOBJECTS))
TESTOUTPUTDIR		:= ../build/release
TESTOBJECTS		:= $(patsubst %,$(TESTOUTPUTDIR)/%,$(_TESTOBJECTS))


all : test test-debug

test:	$(TESTOUTPUTDIR)/test_rm_main1 $(TESTOUTPUTDIR)/test_rm_main2

$(TESTOUTPUTDIR)/test_rm_main1:	$(AUXOBJS) $(TESTOUTPUTDIR)/test_rm1.o $(TESTOUTPUTDIR)/test_rm_main1.o
	$(CC) $(INCLUDES) $(AUXOBJS) $(LDFLAGS) $ $(TESTOUTPUTDIR)/test_rm1.o $(TESTOUTPUTDIR)/test_rm_main1.o -o $@

$(TESTOUTPUTDIR)/test_rm_main2:	$(AUXOBJS) $(TESTOUTPUTDIR)/test_rm2.o $(TESTOUTPUTDIR)/test_rm_main2.o
	$(CC) $(INCLUDES) $(AUXOBJS) $(LDFLAGS2) $ $(TESTOUTPUTDIR)/test_rm2.o $(TESTOUTPUTDIR)/test_rm_main2.o -o $@

test-debug:	$(TESTOUTPUTDIR_D)/test_rm_main1 $(TESTOUTPUTDIR_D)/test_rm_main2

$(TESTOUTPUTDIR_D)/test_rm_main1:	$(AUXOBJS_D) $(TESTOUTPUTDIR_D)/test_rm1.o $(TESTOUTPUTDIR_D)/test_rm_main1.o
	$(CC) $(INCLUDES) $(AUXOBJS_D) $(LDFLAGS) $(TESTOUTPUTDIR_D)/test_rm1.o $(TESTOUTPUTDIR_D)/test_rm_main1.o -o $@

$(TESTOUTPUTDIR_D)/test_rm_main2:	$(AUXOBJS_D) $(TESTOUTPUTDIR_D)/test_rm2.o $(TESTOUTPUTDIR_D)/test_rm_main2.o
	$(CC) $(INCLUDES) $(AUXOBJS_D) $(LDFLAGS2) $(TESTOUTPUTDIR_D)/test_rm2.o $(TESTOUTPUTDIR_D)/test_rm_main2.o -o $@

test-check:	test
	$(TESTOUTPUTDIR)/test_rm_main1
	$(TESTOUTPUTDIR)/test_rm_main2

test-check-debug:	test
	$(TESTOUTPUTDIR_D)/test_rm_main1
	$(TESTOUTPUTDIR)/test_rm_main2


$(TESTOUTPUTDIR)/%.o: $(TESTSRCDIR)/%.c
	$(CC) $(CFLAGS) $(INCLUDES) $< -o $@


$(TESTOUTPUTDIR_D)/%.o: $(TESTSRCDIR)/%.c
	$(CC) $(CFLAGS_D) $(INCLUDES) $< -o $@
#.c.o:  
#	$(CC) $(CFLAGS) $(INCLUDES) $< -o $@

clean:
	find $(TESTOUTPUTDIR) -maxdepth 1 -type f -exec rm -f {} \;
clean-debug:
	find $(TESTOUTPUTDIR_D) -maxdepth 1 -type f -exec rm -f {} \;
clean-logs:
	find $(TESTOUTPUTDIR)/log  -maxdepth 1 -not -path '*/\.*' -type f -exec rm -f {} \;
clean-logs-debug:
	find $(TESTOUTPUTDIR_D)/log  -maxdepth 1 -not -path '*/\.*' -type f -exec rm -f {} \;
clean-all:
		make clean && make clean-debug && make clean-logs && make clean-logs-debug
